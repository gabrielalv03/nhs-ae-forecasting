library(dplyr)
library(randomForest)

# === Common predictor groups ===
numeric_predictors <- c(
  "weighted_imd", "flu_percent", "covid_percent",
  "bank_holiday_number", "temperature", "population_density",
  "gp_patients_per_gp"
)

categorical_predictors <- c("season")

# Ensure dashes are NA
train_data <- train_data %>%
  mutate(across(where(is.character), ~ na_if(., "-")))

# ================================
# === 1. RF: Attendance by Region
# ================================
rf_att_region_data <- train_data %>%
  mutate(
    AE_att_tot = as.numeric(AE_att_tot),
    across(all_of(numeric_predictors), as.numeric),
    across(all_of(categorical_predictors), as.factor)
  ) %>%
  group_by(region, date) %>%
  summarise(
    AE_att_tot = sum(AE_att_tot, na.rm = TRUE),
    across(all_of(numeric_predictors), ~ mean(.x, na.rm = TRUE)),
    season = first(season),
    .groups = "drop"
  ) %>%
  filter(if_all(everything(), ~ !is.na(.)))

rf_attendance_region <- randomForest(
  AE_att_tot ~ ., data = rf_att_region_data, ntree = 500, importance = TRUE
)

saveRDS(rf_attendance_region, "rf_attendance_region.rds")

# ================================
# === 2. RF: Attendance by Trust
# ================================
rf_att_trust_data <- train_data %>%
  mutate(
    AE_att_tot = as.numeric(AE_att_tot),
    across(all_of(numeric_predictors), as.numeric),
    across(all_of(categorical_predictors), as.factor)
  ) %>%
  group_by(name, date) %>%
  summarise(
    AE_att_tot = mean(AE_att_tot, na.rm = TRUE),
    across(all_of(numeric_predictors), ~ mean(.x, na.rm = TRUE)),
    season = first(season),
    .groups = "drop"
  ) %>%
  filter(if_all(everything(), ~ !is.na(.)))

rf_attendance_trust <- randomForest(
  AE_att_tot ~ ., data = rf_att_trust_data, ntree = 500, importance = TRUE
)

saveRDS(rf_attendance_trust, "rf_attendance_trust.rds")

# ================================
# === 3. RF: % Over 4h by Region
# ================================
rf_over4_region_data <- train_data %>%
  mutate(
    AE_over4_pct = as.numeric(AE_over4_pct),
    across(all_of(numeric_predictors), as.numeric),
    across(all_of(categorical_predictors), as.factor)
  ) %>%
  group_by(region, date) %>%
  summarise(
    AE_over4_pct = weighted.mean(AE_over4_pct, AE_att_tot),
    across(all_of(numeric_predictors), ~ mean(.x, na.rm = TRUE)),
    season = first(season),
    .groups = "drop"
  ) %>%
  filter(if_all(everything(), ~ !is.na(.)))

rf_over4_region <- randomForest(
  AE_over4_pct ~ ., data = rf_over4_region_data, ntree = 500, importance = TRUE
)

saveRDS(rf_over4_region, "rf_over4_region.rds")

# ================================
# === 4. RF: % Over 4h by Trust
# ================================
rf_over4_trust_data <- train_data %>%
  group_by(name, date) %>%
  summarise(
    AE_over4_pct = mean(AE_over4_pct, na.rm = TRUE),
    across(all_of(numeric_predictors), ~ mean(.x, na.rm = TRUE)),
    season = first(season),
    .groups = "drop"
  ) %>%
  filter(if_all(everything(), ~ !is.na(.)))

rf_over4_trust <- randomForest(
  AE_over4_pct ~ ., data = rf_over4_trust_data, ntree = 500, importance = TRUE
)

saveRDS(rf_over4_trust, "rf_over4_trust.rds")

# Ensure that 'test_data' has the same structure and factor levels as 'train_data'
test_data <- test_data %>%
  mutate(
    season = factor(season, levels = levels(train_data$season)),  # Match levels of 'season'
    region = factor(region, levels = levels(train_data$region))   # Match levels of 'region'
  )

# Make predictions using the random forest model for AE_att_tot

# (a) Recompute region–date features
rf_test_region_feats <- test_data %>%
  group_by(region, date) %>%
  summarise(
    across(all_of(numeric_predictors), ~ mean(.x, na.rm = TRUE)),
    season = first(season),
    .groups = "drop"
  )

# (b) Get one RF forecast per region–date
region_preds <- rf_test_region_feats %>%
  mutate(
    pred_rf_att_region = predict(rf_attendance_region, newdata = rf_test_region_feats)
  )

# (c) Left-join back to the raw 710-row test set
pred_rf_att_region <- test_data %>%
  left_join(region_preds %>% select(region, date, pred_rf_att_region),
            by = c("region","date")) %>%
  pull(pred_rf_att_region)

pred_rf_att_trust <- predict(rf_attendance_trust, newdata = test_data)

# Random forest model predictions: AE_over4_pct for region and trust
# 1) Prepare your region–date feature frame exactly as in training
rf_test_over4_region_feats <- test_data %>%
  # match the same type conversions you did for train
  mutate(
    AE_over4_pct = as.numeric(AE_over4_pct),
    across(all_of(numeric_predictors), as.numeric),
    across(all_of(categorical_predictors), as.factor)
  ) %>%
  group_by(region, date) %>%
  summarise(
    # summarise predictors exactly like in rf_over4_region_data
    across(all_of(numeric_predictors), ~ mean(.x, na.rm = TRUE)),
    season = first(season),
    .groups = "drop"
  ) %>%
  filter(if_all(everything(), ~ !is.na(.)))

# 2) Predict once per region–date
region4_preds <- rf_test_over4_region_feats %>%
  mutate(
    pred_rf_over4_region = predict(rf_over4_region, newdata = rf_test_over4_region_feats)
  ) %>%
  select(region, date, pred_rf_over4_region)

# 3) Join back to the full test_data (one row per trust–date)
test_with_region4 <- test_data %>%
  left_join(region4_preds, by = c("region", "date"))

# 4) Extract your length-710 vector of region-level %>4h RF predictions
pred_rf_over4_region <- test_with_region4$pred_rf_over4_region

pred_rf_over4_trust <- predict(rf_over4_trust, newdata = test_data)
