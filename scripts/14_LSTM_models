library(dplyr)
library(keras)
library(lubridate)

# === Common settings ===
create_sequences <- function(series, seq_len = 12) {
  n <- length(series)
  X <- array(NA, dim = c(n - seq_len, seq_len, 1))
  Y <- numeric(n - seq_len)
  for (i in 1:(n - seq_len)) {
    X[i,,1] <- series[i:(i + seq_len - 1)]
    Y[i] <- series[i + seq_len]
  }
  list(X = X, Y = Y)
}

dir.create("models", showWarnings = FALSE)

# === 1. LSTM Attendance by Region ===
lstm_data_att_region <- train_data %>%
  mutate(AE_att_tot = as.numeric(AE_att_tot), date = as.Date(date)) %>%
  group_by(region, date) %>%
  summarise(y = sum(AE_att_tot), .groups = "drop") %>%
  filter(!is.na(y))

for (r in unique(lstm_data_att_region$region)) {
  region_df <- lstm_data_att_region %>% filter(region == r)
  if (nrow(region_df) < 24) next
  
  scale_vals <- scale(region_df$y)
  seq_data <- create_sequences(as.numeric(scale_vals))
  X <- seq_data$X
  Y <- seq_data$Y
  
  model <- keras_model_sequential() %>%
    layer_lstm(units = 50, input_shape = c(12, 1)) %>%
    layer_dense(units = 1)
  model %>% compile(optimizer = "adam", loss = "mse")
  model %>% fit(X, Y, epochs = 50, batch_size = 8, verbose = 0)
  
  path <- paste0("models/lstm_att_region_", gsub(" ", "_", r), ".h5")
  save_model_hdf5(model, path)
}

# === 2. LSTM Attendance by Trust ===
lstm_data_att_trust <- train_data %>%
  mutate(AE_att_tot = as.numeric(AE_att_tot), date = as.Date(date)) %>%
  group_by(name, date) %>%
  summarise(y = sum(AE_att_tot), .groups = "drop") %>%
  filter(!is.na(y))

for (t in unique(lstm_data_att_trust$name)) {
  trust_df <- lstm_data_att_trust %>% filter(name == t)
  if (nrow(trust_df) < 24) next
  
  scale_vals <- scale(trust_df$y)
  seq_data <- create_sequences(as.numeric(scale_vals))
  X <- seq_data$X
  Y <- seq_data$Y
  
  model <- keras_model_sequential() %>%
    layer_lstm(units = 50, input_shape = c(12, 1)) %>%
    layer_dense(units = 1)
  model %>% compile(optimizer = "adam", loss = "mse")
  model %>% fit(X, Y, epochs = 50, batch_size = 8, verbose = 0)
  
  path <- paste0("models/lstm_att_trust_", gsub(" ", "_", t), ".h5")
  save_model_hdf5(model, path)
}

# === 3. LSTM Over 4h % by Region ===
lstm_data_over4_region <- train_data %>%
  mutate(AE_per4_all = as.numeric(AE_per4_all), AE_over4_pct = 1 - AE_per4_all,
         date = as.Date(date)) %>%
  group_by(region, date) %>%
  summarise(y = mean(AE_over4_pct, na.rm = TRUE), .groups = "drop") %>%
  filter(!is.na(y))

for (r in unique(lstm_data_over4_region$region)) {
  region_df <- lstm_data_over4_region %>% filter(region == r)
  if (nrow(region_df) < 24) next
  
  scale_vals <- scale(region_df$y)
  seq_data <- create_sequences(as.numeric(scale_vals))
  X <- seq_data$X
  Y <- seq_data$Y
  
  model <- keras_model_sequential() %>%
    layer_lstm(units = 50, input_shape = c(12, 1)) %>%
    layer_dense(units = 1)
  model %>% compile(optimizer = "adam", loss = "mse")
  model %>% fit(X, Y, epochs = 50, batch_size = 8, verbose = 0)
  
  path <- paste0("models/lstm_over4_region_", gsub(" ", "_", r), ".h5")
  save_model_hdf5(model, path)
}

# === 4. LSTM Over 4h % by Trust ===
lstm_data_over4_trust <- train_data %>%
  mutate(AE_per4_all = as.numeric(AE_per4_all), AE_over4_pct = 1 - AE_per4_all,
         date = as.Date(date)) %>%
  group_by(name, date) %>%
  summarise(y = mean(AE_over4_pct, na.rm = TRUE), .groups = "drop") %>%
  filter(!is.na(y))

for (t in unique(lstm_data_over4_trust$name)) {
  trust_df <- lstm_data_over4_trust %>% filter(name == t)
  if (nrow(trust_df) < 24) next
  
  scale_vals <- scale(trust_df$y)
  seq_data <- create_sequences(as.numeric(scale_vals))
  X <- seq_data$X
  Y <- seq_data$Y
  
  model <- keras_model_sequential() %>%
    layer_lstm(units = 50, input_shape = c(12, 1)) %>%
    layer_dense(units = 1)
  model %>% compile(optimizer = "adam", loss = "mse")
  model %>% fit(X, Y, epochs = 50, batch_size = 8, verbose = 0)
  
  path <- paste0("models/lstm_over4_trust_", gsub(" ", "_", t), ".h5")
  save_model_hdf5(model, path)
}
