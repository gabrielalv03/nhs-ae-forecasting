library(dplyr)
library(xgboost)

# Common numeric features
xgb_features <- c(
  "weighted_imd", "flu_percent", "covid_percent",
  "bank_holiday_number", "temperature", "population_density", "gp_patients_per_gp"
)

# === Prep ===
train_data <- train_data %>%
  mutate(across(where(is.character), ~ na_if(., "-"))) %>%
  mutate(
    AE_att_tot = as.numeric(AE_att_tot),
    AE_over4_pct = as.numeric(AE_over4_pct),
    across(all_of(xgb_features), as.numeric),
    season = as.factor(season)
  )

# =============================
# 1. XGBoost: Attendances by Region
# =============================
xgb_region_data <- train_data %>%
  group_by(region, date, season) %>%
  summarise(
    AE_att_tot = sum(AE_att_tot, na.rm = TRUE),
    across(all_of(xgb_features), ~ mean(.x, na.rm = TRUE)),
    .groups = "drop"
  ) %>%
  filter(if_all(everything(), ~ !is.na(.)))

xgb_region_matrix <- cbind(
  model.matrix(~ season - 1, xgb_region_data),
  as.matrix(select(xgb_region_data, all_of(xgb_features)))
)

xgb_model_att_region <- xgboost(
  data = xgb_region_matrix,
  label = xgb_region_data$AE_att_tot,
  objective = "reg:squarederror",
  nrounds = 100,
  verbose = 0
)

saveRDS(xgb_model_att_region, "xgb_attendance_region.rds")

# =============================
# 2. XGBoost: Attendances by Trust
# =============================
xgb_trust_data <- train_data %>%
  group_by(name, date, season) %>%
  summarise(
    AE_att_tot = sum(AE_att_tot, na.rm = TRUE),
    across(all_of(xgb_features), ~ mean(.x, na.rm = TRUE)),
    .groups = "drop"
  ) %>%
  filter(if_all(everything(), ~ !is.na(.)))

xgb_trust_matrix <- cbind(
  model.matrix(~ season - 1, xgb_trust_data),
  as.matrix(select(xgb_trust_data, all_of(xgb_features)))
)

xgb_model_att_trust <- xgboost(
  data = xgb_trust_matrix,
  label = xgb_trust_data$AE_att_tot,
  objective = "reg:squarederror",
  nrounds = 100,
  verbose = 0
)

saveRDS(xgb_model_att_trust, "xgb_attendance_trust.rds")

# =============================
# 3. XGBoost: % Over 4h by Region
# =============================
xgb_over4_region_data <- train_data %>%
  group_by(region, date, season) %>%
  summarise(
    AE_over4_pct = mean(AE_over4_pct, na.rm = TRUE),
    across(all_of(xgb_features), ~ mean(.x, na.rm = TRUE)),
    .groups = "drop"
  ) %>%
  filter(if_all(everything(), ~ !is.na(.)))

xgb_over4_region_matrix <- cbind(
  model.matrix(~ season - 1, xgb_over4_region_data),
  as.matrix(select(xgb_over4_region_data, all_of(xgb_features)))
)

xgb_model_over4_region <- xgboost(
  data = xgb_over4_region_matrix,
  label = xgb_over4_region_data$AE_over4_pct,
  objective = "reg:squarederror",
  nrounds = 100,
  verbose = 0
)

saveRDS(xgb_model_over4_region, "xgb_over4_region.rds")

# =============================
# 4. XGBoost: % Over 4h by Trust
# =============================
xgb_over4_trust_data <- train_data %>%
  group_by(name, date, season) %>%
  summarise(
    AE_over4_pct = mean(AE_over4_pct, na.rm = TRUE),
    across(all_of(xgb_features), ~ mean(.x, na.rm = TRUE)),
    .groups = "drop"
  ) %>%
  filter(if_all(everything(), ~ !is.na(.)))

xgb_over4_trust_matrix <- cbind(
  model.matrix(~ season - 1, xgb_over4_trust_data),
  as.matrix(select(xgb_over4_trust_data, all_of(xgb_features)))
)

xgb_model_over4_trust <- xgboost(
  data = xgb_over4_trust_matrix,
  label = xgb_over4_trust_data$AE_over4_pct,
  objective = "reg:squarederror",
  nrounds = 100,
  verbose = 0
)

saveRDS(xgb_model_over4_trust, "xgb_over4_trust.rds")


library(dplyr)

# 1a) Coerce types exactly like in training
test_ready <- test_data %>%
  mutate(across(where(is.character), ~ na_if(., "-"))) %>%
  mutate(
    across(c(AE_att_tot, AE_over4_pct, all_of(xgb_features)), as.numeric),
    season = as.factor(season)
  )

# 1b) Region‐level matrices
xgb_region_test <- test_ready %>%
  group_by(region, date, season) %>%
  summarise(
    AE_att_tot     = sum(AE_att_tot, na.rm=TRUE),
    AE_over4_pct   = mean(AE_over4_pct, na.rm=TRUE),
    across(all_of(xgb_features), ~ mean(.x, na.rm=TRUE)),
    .groups = "drop"
  ) %>%
  filter(if_all(everything(), ~ !is.na(.))) 

# Build the design matrices exactly as you did when fitting
region_mat_att   <- cbind(
  model.matrix(~ season - 1, xgb_region_test),
  as.matrix(select(xgb_region_test, all_of(xgb_features)))
)
region_mat_over4 <- region_mat_att  # same structure except the label changes

# 1c) Trust‐level matrices
xgb_trust_test <- test_ready %>%
  group_by(name, date, season) %>%
  summarise(
    AE_att_tot     = sum(AE_att_tot, na.rm=TRUE),
    AE_over4_pct   = mean(AE_over4_pct, na.rm=TRUE),
    across(all_of(xgb_features), ~ mean(.x, na.rm=TRUE)),
    .groups = "drop"
  ) %>%
  filter(if_all(everything(), ~ !is.na(.)))

trust_mat_att   <- cbind(
  model.matrix(~ season - 1, xgb_trust_test),
  as.matrix(select(xgb_trust_test, all_of(xgb_features)))
)
trust_mat_over4 <- trust_mat_att

# attendance
pred_xgb_att_region <- predict(xgb_model_att_region, region_mat_att)
pred_xgb_att_trust  <- predict(xgb_model_att_trust,  trust_mat_att)

# %>4h
pred_xgb_over4_region <- predict(xgb_model_over4_region, region_mat_over4)
pred_xgb_over4_trust  <- predict(xgb_model_over4_trust,  trust_mat_over4)

# 1) Build a tiny lookup of region–date → region‐level forecasts
region_xgb_preds <- xgb_region_test %>%
  mutate(
    pred_xgb_att_region   = pred_xgb_att_region,
    pred_xgb_over4_region = pred_xgb_over4_region
  ) %>%
  select(region, date, pred_xgb_att_region, pred_xgb_over4_region)

# 2) Join back onto your full 710-row test_data
test_with_xgb_region <- test_data %>%
  left_join(region_xgb_preds, by = c("region","date"))

# 3) Pull out your length-710 vectors
pred_xgb_att_region   <- test_with_xgb_region$pred_xgb_att_region
pred_xgb_over4_region <- test_with_xgb_region$pred_xgb_over4_region

# Verify
length(pred_xgb_att_region)       # should be 710
length(pred_xgb_over4_region)     # should be 710
